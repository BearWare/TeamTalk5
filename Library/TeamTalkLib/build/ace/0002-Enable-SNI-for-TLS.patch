From 080f3f7f59d89c5164639bb32d94767b8796016f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B8rn=20Damstedt=20Rasmussen?= <contact@bearware.dk>
Date: Fri, 4 Jan 2019 11:05:42 +0100
Subject: [PATCH 2/4] Enable SNI for TLS.

---
 ACE/protocols/ace/INet/HTTPS_Session.cpp      | 14 ++++++++++++
 .../ace/INet/HTTPS_SessionFactory.cpp         |  7 ++++++
 ACE/protocols/ace/INet/HTTPS_SessionFactory.h |  3 +++
 .../examples/INet/HTTP_Simple_exec.cpp        | 22 +++++++++++++------
 4 files changed, 39 insertions(+), 7 deletions(-)

diff --git a/ACE/protocols/ace/INet/HTTPS_Session.cpp b/ACE/protocols/ace/INet/HTTPS_Session.cpp
index 94ba1f6f735..81462333935 100644
--- a/ACE/protocols/ace/INet/HTTPS_Session.cpp
+++ b/ACE/protocols/ace/INet/HTTPS_Session.cpp
@@ -133,6 +133,13 @@ namespace ACE
                 ::SSL * ssl_ptr = new_connection->peer ().ssl ();
                 ::SSL_set_SSL_CTX (ssl_ptr, this->context_->ssl_context ().context ());
               }
+
+            // Added by bdr
+            {
+                ::SSL * ssl_ptr = new_connection->peer().ssl();
+                if (!::SSL_set_tlsext_host_name(ssl_ptr, this->host_.c_str()))
+                    return false;
+            }
 #endif
             ACE_HANDLE proxy_conn_handle = proxy_connection.peer ().get_handle ();
             proxy_connection.peer ().set_handle (ACE_INVALID_HANDLE);
@@ -162,6 +169,13 @@ namespace ACE
                 ::SSL * ssl_ptr = new_connection->peer ().ssl ();
                 ::SSL_set_SSL_CTX (ssl_ptr, this->context_->ssl_context ().context ());
               }
+
+            // Added by bdr
+            {
+                ::SSL * ssl_ptr = new_connection->peer().ssl();
+                if (!::SSL_set_tlsext_host_name(ssl_ptr, this->host_.c_str()))
+                    return false;
+            }
 #endif
             typedef ACE_Connector<connection_type, ACE_SSL_SOCK_Connector> connector_type;
 
diff --git a/ACE/protocols/ace/INet/HTTPS_SessionFactory.cpp b/ACE/protocols/ace/INet/HTTPS_SessionFactory.cpp
index 17818a92b5b..cf5dba7c18f 100644
--- a/ACE/protocols/ace/INet/HTTPS_SessionFactory.cpp
+++ b/ACE/protocols/ace/INet/HTTPS_SessionFactory.cpp
@@ -69,7 +69,14 @@ namespace ACE
         return 0;
       }
 
+    // added by bdr
+    void SessionFactory_Impl::registerHTTPS()
+    {
+        ACE_Singleton<SessionFactory_Impl, ACE_SYNCH::NULL_MUTEX>::instance();
+    }
+
   }
+
 }
 
 ACE_END_VERSIONED_NAMESPACE_DECL
diff --git a/ACE/protocols/ace/INet/HTTPS_SessionFactory.h b/ACE/protocols/ace/INet/HTTPS_SessionFactory.h
index a38b99f6c68..9d83fed7940 100644
--- a/ACE/protocols/ace/INet/HTTPS_SessionFactory.h
+++ b/ACE/protocols/ace/INet/HTTPS_SessionFactory.h
@@ -58,6 +58,9 @@ namespace ACE
             public:
               virtual ACE::INet::ConnectionHolder* create_connection (
                   const ACE::INet::ConnectionKey& key) const;
+
+              // added by bdr
+              static void registerHTTPS();
           };
 
       }
diff --git a/ACE/protocols/examples/INet/HTTP_Simple_exec.cpp b/ACE/protocols/examples/INet/HTTP_Simple_exec.cpp
index 0c4f2e24754..bde7eea4a2f 100644
--- a/ACE/protocols/examples/INet/HTTP_Simple_exec.cpp
+++ b/ACE/protocols/examples/INet/HTTP_Simple_exec.cpp
@@ -6,6 +6,10 @@
 #if defined (ACE_HAS_SSL) && ACE_HAS_SSL == 1
 # include "ace/INet/SSL_CallbackManager.h"
 # include "ace/INet/HTTPS_Context.h"
+#include <ace/INet/HTTPS_URL.h>
+#include <ace/INet/HTTPS_SessionFactory.h>
+#include <ace/INet/HTTPS_Session.h>
+
 #endif
 #include "ace/INet/INet_Log.h"
 #include <iostream>
@@ -166,6 +170,7 @@ ACE_TMAIN (int argc, ACE_TCHAR *argv [])
   ACE::HTTPS::Context::set_default_ssl_mode (ssl_mode);
   ACE::HTTPS::Context::set_default_verify_mode (verify_peer);
   ACE::HTTPS::Context::instance ().use_default_ca ();
+  ACE::HTTPS::SessionFactory_Impl::registerHTTPS();
   if (!private_key.empty ())
     {
       if (certificate.empty ())
@@ -221,17 +226,20 @@ ACE_TMAIN (int argc, ACE_TCHAR *argv [])
           return 1;
         }
 
-      ACE::HTTP::URL& http_url = *dynamic_cast<ACE::HTTP::URL*> (url_safe.get ());
+      auto http_url = url_safe.get();
+      //ACE::HTTP::URL& http_url = *dynamic_cast<ACE::HTTP::URL*> ();
 
-      if (!proxy_hostname.empty ())
-        {
-          std::cout << "Setting proxy: " << proxy_hostname.c_str () << ':' << proxy_port << std::endl;
-          http_url.set_proxy (proxy_hostname, proxy_port);
-        }
+      //if (!proxy_hostname.empty ())
+      //  {
+      //    std::cout << "Setting proxy: " << proxy_hostname.c_str () << ':' << proxy_port << std::endl;
+      //    http_url->set_proxy (proxy_hostname, proxy_port);
+      //  }
 
       std::cout << "Opening url...";
       My_HTTP_RequestHandler my_rh;
-      ACE::INet::URLStream urlin = http_url.open (my_rh);
+      ACE::INet::URLStream urlin = http_url->open (my_rh);
+      ACE::HTTP::Status status = my_rh.response().get_status();
+
       if (urlin)
         {
           std::cout << "Received response "
-- 
2.32.0

