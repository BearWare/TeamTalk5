name: Ubuntu

on: [push, pull_request]

env:
  # TeamTalk unit test environment variables
  INPUTDEVICEID: 1978
  OUTPUTDEVICEID: 1978
  VIDEODEVICEID: None
  VERBOSE: 0
  GITHUBSKIP: 1

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        include:
          - os: ubuntu-22.04
            version: "22"
          - os: ubuntu-24.04
            version: "24"
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: true

    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Update Ubuntu repository
      run: sudo apt-get update

    - name: Remove unnecessary packages and install valgrind
      run: |
        sudo apt-get autoremove --purge
        # Ubuntu 22 specific: Ensure FFmpeg doesn't detect additional dependencies
        ${{ matrix.version == '22' && 'sudo apt-get autoremove --purge libmagickcore-dev libmagickwand-dev libbz2-dev liblzma-dev' || '' }}
        sudo apt-get install valgrind

    - name: Print env
      run: printenv | sort

    - name: Install dependencies
      working-directory: ${{runner.workspace}}/TeamTalk5/Build
      run: sudo make depend-ubuntu${{ matrix.version }}

    - name: Build TeamTalk library and apps
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        source env.sh
        make CMAKE_EXTRA="-DFEATURE_WEBRTC=OFF -DBUILD_TEAMTALK_LIBRARY_UNITTEST_CATCH2=ON -DBUILD_TEAMTALK_LIBRARY_UNITTEST_CATCH2_PERF=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install" -C Build ubuntu${{ matrix.version }}
        echo TEAMTALK_INSTALLDIR=${{runner.workspace}}/install>> $GITHUB_ENV

    - name: Run Java Server API tests (non-encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      run: make runjunitsrv
      env:
        ENCRYPTED: 0
        WEBRTC: 0

    - name: Run Java Server API tests (encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      run: make runjunitsrv
      env:
        ENCRYPTED: 1
        WEBRTC: 0

    - name: Start TeamTalk Standard Server
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        cp Library/TeamTalkLib/test/tt5srv.xml_template Server/tt5srv.xml
        Server/tt5srv -d -c Server/tt5srv.xml

    - name: Start TeamTalk Pro Server (encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        cp -f Library/TeamTalkLib/test/tt5prosrv.xml_template Server/tt5prosrv.xml
        cp Library/TeamTalkLib/test/ttservercert.pem Server/
        cp Library/TeamTalkLib/test/ttserverkey.pem Server/
        cp Library/TeamTalkLib/test/ca.cer Server/
        Server/tt5prosrv -d -wd Server/

    - name: Run PyTest
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        source env.sh
        pytest-3 Library/TeamTalkPy/test/teamtalk_test.py

    - name: Run Python client
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        source env.sh
        make -C Client/ttserverlogpy

    - name: Run Catch unit tests
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkLib/test
      run: valgrind --tool=memcheck --leak-check=full --error-exitcode=1 ./catchtt --durations yes

    - name: Stop TeamTalk Pro Server
      run: killall tt5prosrv

    - name: Run Java unit tests (non-encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      run: make runjunit
      env:
        ENCRYPTED: 0
        WEBRTC: 0

    - name: Stop TeamTalk Standard Server
      run: killall tt5srv

    - name: Start TeamTalk Pro Server (non-encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        cp -f Library/TeamTalkLib/test/tt5srv.xml_template Server/tt5srv.xml
        Server/tt5prosrv -d -c Server/tt5srv.xml

    - name: Run Java unit tests with shared audio devices (non-encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      run: make runjunitpro
      env:
        ENCRYPTED: 0
        WEBRTC: 0
        INPUTDEVICEID: 4026
        OUTPUTDEVICEID: 4026

    - name: Stop TeamTalk Pro Server (non-encrypted)
      run: killall tt5prosrv

    - name: Start TeamTalk Pro Server (encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        cp -f Library/TeamTalkLib/test/tt5prosrv.xml_template Server/tt5prosrv.xml
        cp Library/TeamTalkLib/test/ttservercert.pem Server/
        cp Library/TeamTalkLib/test/ttserverkey.pem Server/
        Server/tt5prosrv -d -wd Server/

    - name: Run Java unit tests with virtual audio device (encrypted)
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      run: make runjunitpro
      env:
        ENCRYPTED: 1
        WEBRTC: 0

    - name: Stop TeamTalk Pro Server (encrypted)
      run: killall tt5prosrv

    - name: Install TeamTalk SDK
      working-directory: ${{runner.workspace}}/TeamTalk5/Build/build-ubuntu${{ matrix.version }}
      run: cmake --build . --target install

    - name: Upload TeamTalk SDK artifacts
      uses: actions/upload-artifact@v5
      with:
        name: teamtalksdk-ubuntu${{ matrix.version }}
        path: ${{runner.workspace}}/install

    - name: Create Ubuntu ${{ matrix.version }} portable archives
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: |
        source env.sh
        cd Setup/Portable
        make ubuntu${{ matrix.version }} ubuntu${{ matrix.version }}pro

    - name: Upload TeamTalk portable artifact
      uses: actions/upload-artifact@v5
      with:
        name: teamtalk-ubuntu${{ matrix.version }}
        path: ${{runner.workspace}}/TeamTalk5/Setup/Portable/teamtalk-*

    - name: Upload TeamTalk Pro artifact
      uses: actions/upload-artifact@v5
      with:
        name: teamtalkpro-ubuntu${{ matrix.version }}
        path: ${{runner.workspace}}/TeamTalk5/Setup/Portable/teamtalkpro-*
